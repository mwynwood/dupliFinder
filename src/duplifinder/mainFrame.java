/*
 * mainFrame.java
 *
 * @author Marcus Wynwood
 */

package duplifinder;

import java.io.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;
import javax.swing.text.*;

public class mainFrame extends javax.swing.JFrame {

    final String appName = new String("dupliFinder (Version 0.09 / 27-Feb-2005)");
    final String dupliFinderWebsite = new String("http://duplifinder.sourceforge.net/");
    final String marcusWynwoodsWebsite = new String("http://www.mwynwood.com/");
    final String emptyFileHash = new String("d41d8cd98f00b204e9800998ecf8427e");
    final String quickStart = new String("\n\ndupliFinder Quickstart Guide\n\n1. Select a folder to search with the \"Select Folder\" button\n\n2. Click on \"Find Duplicates\" to start the search\n\n3. Tick the duplicates you want deleted and click \"Delete Selected Files\" to delete any duplicate files found");
    muggaLib ml = new muggaLib(); // Starts the muggaLib library
    findDuplicates fd = new findDuplicates(); // starts the findDuplicate stuff
    
    
    /** Creates new form mainFrame */
    public mainFrame() {
        initComponents();
        ml.setLogFileName("dupliFinder.log");
        output("Started " + appName);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jToolBar1 = new javax.swing.JToolBar();
        folderTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        bottomPanel = new javax.swing.JPanel();
        deleteButton = new javax.swing.JButton();
        bottomRightPanel = new javax.swing.JPanel();
        fileCountLabel = new javax.swing.JLabel();
        outputSplitPane = new javax.swing.JSplitPane();
        previewSplitPane = new javax.swing.JSplitPane();
        outputScrollPane = new javax.swing.JScrollPane();
        outputTable = new javax.swing.JTable();
        previewScrollPane = new javax.swing.JScrollPane();
        previewTextPane = new javax.swing.JTextPane();
        logScrollPane = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        myMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        browseMenuItem = new javax.swing.JMenuItem();
        deleteMenuItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        hashSingleFileMenuItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        quitMenuItem = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        soundCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator6 = new javax.swing.JSeparator();
        dialogBoxCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator7 = new javax.swing.JSeparator();
        logCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        previewCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator5 = new javax.swing.JSeparator();
        createLogCheckBoxMenuItem = new javax.swing.JCheckBoxMenuItem();
        jSeparator8 = new javax.swing.JSeparator();
        clearLogFileMenuItem = new javax.swing.JMenuItem();
        helpMenu = new javax.swing.JMenu();
        toDoMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        visitWebsiteMenuItem = new javax.swing.JMenuItem();
        visitMarcusWebsiteMenuItem = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JSeparator();
        aboutMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle(appName);
        setBackground(new java.awt.Color(255, 255, 255));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.add(folderTextField);

        browseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/i-directory-accept.png")));
        browseButton.setText("Select Folder...");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(browseButton);

        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/emblem-gear.png")));
        searchButton.setText("Find Duplicates");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        jToolBar1.add(searchButton);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.NORTH);

        bottomPanel.setLayout(new java.awt.BorderLayout());

        deleteButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trash-full.png")));
        deleteButton.setText("Delete Selected Files");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        bottomPanel.add(deleteButton, java.awt.BorderLayout.WEST);

        fileCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        fileCountLabel.setText("Files: 0");
        bottomRightPanel.add(fileCountLabel);

        bottomPanel.add(bottomRightPanel, java.awt.BorderLayout.EAST);

        getContentPane().add(bottomPanel, java.awt.BorderLayout.SOUTH);

        outputSplitPane.setDividerLocation(350);
        outputSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        outputSplitPane.setResizeWeight(1.0);
        outputSplitPane.setContinuousLayout(true);
        outputSplitPane.setOneTouchExpandable(true);
        previewSplitPane.setDividerLocation(650);
        previewSplitPane.setResizeWeight(0.5);
        previewSplitPane.setContinuousLayout(true);
        previewSplitPane.setOneTouchExpandable(true);
        outputTable.setFont(new java.awt.Font("Courier New", 0, 12));
        outputTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null}
            },
            new String [] {
                "Selected ->", "Duplicate File", "Selected ->", "Original File", "Fingerprint"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.Boolean.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        outputTable.setCellSelectionEnabled(true);
        outputTable.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        outputTable.setTableHeader(outputTable.getTableHeader());
        // Set the width of the 1st column
        TableColumn selectedColumn0 = outputTable.getColumnModel().getColumn(0);
        selectedColumn0.setMaxWidth(70);
        selectedColumn0.setPreferredWidth(70);

        TableColumn selectedColumn2 = outputTable.getColumnModel().getColumn(2);
        selectedColumn2.setMaxWidth(70);
        selectedColumn2.setPreferredWidth(70);
        outputTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                outputTableMouseClicked(evt);
            }
        });

        outputScrollPane.setViewportView(outputTable);

        previewSplitPane.setLeftComponent(outputScrollPane);

        previewScrollPane.setAutoscrolls(true);
        previewTextPane.setBorder(null);
        previewTextPane.setEditable(false);
        previewTextPane.setFont(new java.awt.Font("Verdana", 0, 10));
        previewTextPane.setText(quickStart);
        previewTextPane.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        /*
        previewTextPane.setText("");

        StyledDocument doc = (StyledDocument)previewTextPane.getDocument();
        Style style = doc.addStyle("StyleName", null);

        ImageIcon icon = new ImageIcon(getClass().getResource("/images/piereceTriplets.jpg"));

        StyleConstants.setIcon(style, icon);
        try {
            // Insert the image at the end of the text
            doc.insertString(doc.getLength(), "ignored text", style);
        } catch (BadLocationException e) {
            //toLogFile("ERROR - "+ e);
            //System.out.println(e);
        }
        */
        previewScrollPane.setViewportView(previewTextPane);

        previewSplitPane.setRightComponent(previewScrollPane);

        outputSplitPane.setTopComponent(previewSplitPane);

        logScrollPane.setAutoscrolls(true);
        logTextArea.setEditable(false);
        logTextArea.setFont(new java.awt.Font("Verdana", 0, 10));
        logScrollPane.setViewportView(logTextArea);

        outputSplitPane.setRightComponent(logScrollPane);

        getContentPane().add(outputSplitPane, java.awt.BorderLayout.CENTER);

        fileMenu.setText("File");
        browseMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/i-directory-accept.png")));
        browseMenuItem.setText("Select Folder...");
        browseMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(browseMenuItem);

        deleteMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/trash-full.png")));
        deleteMenuItem.setText("Delete Selected Files");
        deleteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(deleteMenuItem);

        fileMenu.add(jSeparator3);

        hashSingleFileMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/emblem-gear.png")));
        hashSingleFileMenuItem.setText("Create a single fingerprint...");
        hashSingleFileMenuItem.setToolTipText("Creates a fingerprint of a single file");
        hashSingleFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hashSingleFileMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(hashSingleFileMenuItem);

        fileMenu.add(jSeparator2);

        quitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/close.png")));
        quitMenuItem.setText("Quit");
        quitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitMenuItemActionPerformed(evt);
            }
        });

        fileMenu.add(quitMenuItem);

        myMenuBar.add(fileMenu);

        optionsMenu.setText("Options");
        soundCheckBoxMenuItem.setSelected(true);
        soundCheckBoxMenuItem.setText("Sound");
        optionsMenu.add(soundCheckBoxMenuItem);

        optionsMenu.add(jSeparator6);

        dialogBoxCheckBoxMenuItem.setSelected(true);
        dialogBoxCheckBoxMenuItem.setText("Display Dialog Boxes");
        optionsMenu.add(dialogBoxCheckBoxMenuItem);

        optionsMenu.add(jSeparator7);

        logCheckBoxMenuItem.setSelected(true);
        logCheckBoxMenuItem.setText("Show Log Frame");
        logCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logCheckBoxMenuItemActionPerformed(evt);
            }
        });

        optionsMenu.add(logCheckBoxMenuItem);

        previewCheckBoxMenuItem.setSelected(true);
        previewCheckBoxMenuItem.setText("Show Preview Frame");
        previewCheckBoxMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                previewCheckBoxMenuItemActionPerformed(evt);
            }
        });

        optionsMenu.add(previewCheckBoxMenuItem);

        optionsMenu.add(jSeparator5);

        createLogCheckBoxMenuItem.setSelected(true);
        createLogCheckBoxMenuItem.setText("Create Log File");
        createLogCheckBoxMenuItem.setToolTipText("File: dupliFinder.log");
        optionsMenu.add(createLogCheckBoxMenuItem);

        optionsMenu.add(jSeparator8);

        clearLogFileMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/i-core.png")));
        clearLogFileMenuItem.setText("Clear Log File");
        clearLogFileMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearLogFileMenuItemActionPerformed(evt);
            }
        });

        optionsMenu.add(clearLogFileMenuItem);

        myMenuBar.add(optionsMenu);

        helpMenu.setText("Help");
        toDoMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/gnome-application-rtf.png")));
        toDoMenuItem.setText("Things to do");
        toDoMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toDoMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(toDoMenuItem);

        helpMenu.add(jSeparator1);

        visitWebsiteMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/emblem-web.png")));
        visitWebsiteMenuItem.setText("Visit dupliFinder Website");
        visitWebsiteMenuItem.setToolTipText(dupliFinderWebsite);
        visitWebsiteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visitWebsiteMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(visitWebsiteMenuItem);

        visitMarcusWebsiteMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/emblem-web.png")));
        visitMarcusWebsiteMenuItem.setText("Visit mwynwood.com");
        visitMarcusWebsiteMenuItem.setToolTipText(marcusWynwoodsWebsite);
        visitMarcusWebsiteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                visitMarcusWebsiteMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(visitMarcusWebsiteMenuItem);

        helpMenu.add(jSeparator4);

        aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/emblem-question.png")));
        aboutMenuItem.setText("About dupliFinder");
        aboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutMenuItemActionPerformed(evt);
            }
        });

        helpMenu.add(aboutMenuItem);

        myMenuBar.add(helpMenu);

        setJMenuBar(myMenuBar);

        pack();
    }//GEN-END:initComponents

    private void logCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logCheckBoxMenuItemActionPerformed
        // can't you just expand/collapse the thing??
        if (logCheckBoxMenuItem.isSelected()) {
            outputSplitPane.setDividerLocation(350);
            outputSplitPane.setDividerSize(10);
        } else {
            outputSplitPane.setDividerLocation(java.lang.Integer.MAX_VALUE);
            outputSplitPane.setDividerSize(10);
        }
        previewSplitPane.updateUI();
    }//GEN-LAST:event_logCheckBoxMenuItemActionPerformed

    private void previewCheckBoxMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_previewCheckBoxMenuItemActionPerformed
        // can't you just expand/collapse the thing??
        if (previewCheckBoxMenuItem.isSelected()) {
            previewTextPane.setText(quickStart);
            previewSplitPane.setDividerLocation(650);
            previewSplitPane.setDividerSize(10);
        } else {
            previewSplitPane.setDividerLocation(java.lang.Integer.MAX_VALUE);
            previewSplitPane.setDividerSize(10);
        }
        previewSplitPane.updateUI();
    }//GEN-LAST:event_previewCheckBoxMenuItemActionPerformed

    private void outputTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_outputTableMouseClicked
        // If the user clicks either the "Original File" or "Duplicate File" columns,
        // display the contents in the Preview section
        
        int column = outputTable.getSelectedColumn();
        int row = outputTable.getSelectedRow();

        if (column == 1 || column == 3) {
            
            String fileName = new String(outputTable.getValueAt(row, column).toString().substring(outputTable.getValueAt(row, column).toString().lastIndexOf(java.io.File.separatorChar)+1, outputTable.getValueAt(row, column).toString().length()));
            String filePath = new String(outputTable.getValueAt(row, column).toString().substring(0,outputTable.getValueAt(row, column).toString().lastIndexOf(java.io.File.separatorChar)+1));
            
            // if ".jpg" or ".png" or ".gif"
            if (fileName.toLowerCase().contains(".jpg") || fileName.toLowerCase().contains(".png") || fileName.toLowerCase().contains(".gif")) {
                previewTextPane.setText(filePath+fileName+"\n\n");

                StyledDocument doc = (StyledDocument)previewTextPane.getDocument();
                Style style = doc.addStyle("StyleName", null);
                
                ImageIcon icon = new ImageIcon("" + filePath + fileName);
                // Resize icon             
                
                StyleConstants.setIcon(style, icon);
                try {
                    // Insert the image at the end of the text
                    doc.insertString(doc.getLength(), "ignored text", style);
                } catch (BadLocationException e) {
                    //toLogFile("ERROR - "+ e);
                    //System.out.println(e);
                }
            }

            // else if ".txt" or ".log" or ".ini"
            else if (fileName.toLowerCase().contains(".txt") || fileName.toLowerCase().contains(".log") || fileName.toLowerCase().contains(".ini")) {
                previewTextPane.setText(""+ outputTable.getValueAt(row, column));
                previewTextPane.setText(previewTextPane.getText() + System.getProperty("line.separator"));
                previewTextPane.setText(previewTextPane.getText() + System.getProperty("line.separator"));
                
                StringBuffer contents = new StringBuffer();
                BufferedReader input = null;
                try {
                  input = new BufferedReader( new FileReader(outputTable.getValueAt(row, column).toString()) );
                  String line = null;
                  while (( line = input.readLine()) != null){
                    previewTextPane.setText(previewTextPane.getText() + line);
                    previewTextPane.setText(previewTextPane.getText() + System.getProperty("line.separator"));
                  }
                }
                catch (Exception e){
                    //toLogFile("ERROR - "+ e);
                    //System.out.println(e);
                }
                finally {
                  try {
                    if (input!= null) {
                      input.close();
                    }
                  }
                  catch (IOException e) {
                        //toLogFile("ERROR - "+ e);
                        //System.out.println(e);
                  }
                }
            }
            
            // else if ".wav"
            else if (fileName.toLowerCase().contains(".wav")) {
                //play the WAV till the user clicks away
                previewTextPane.setText(filePath+fileName+"\n\n");
                previewTextPane.setText(previewTextPane.getText() + "WAV preview is not yet supported.");
                /*
                previewTextPane.setText("Playing: " + outputTable.getValueAt(row, column));
                try {
                    playSound(outputTable.getValueAt(row, column).toString());
                } catch (Exception e) {
                    previewTextPane.setText(previewTextPane.getText() + "\n\nError: " + e);
                }
                */
            }

            // else if ".mp3"
            else if (fileName.toLowerCase().contains(".mp3")) {
                //play the MP3 till the user clicks away
                previewTextPane.setText(filePath+fileName+"\n\n");
                previewTextPane.setText(previewTextPane.getText() + "MP3 preview is not yet supported");
            }

            // else everything else :-)
            else {
                previewTextPane.setText(filePath+fileName+"\n\n");
                previewTextPane.setText(previewTextPane.getText() + "No preview avalible.");
            }
        }
    }//GEN-LAST:event_outputTableMouseClicked

    private void hashSingleFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hashSingleFileMenuItemActionPerformed
        clearTable();
        javax.swing.JFileChooser fc = new javax.swing.JFileChooser(folderTextField.getText());
        fc.setFileSelectionMode(javax.swing.JFileChooser.FILES_ONLY);
        fc.setDialogTitle("Select a file to generate a fingerprint of...");
        int retval = fc.showOpenDialog(this);
        if (retval == fc.APPROVE_OPTION) {
            try {
                File mySelection = fc.getSelectedFile();
                Md5 myMd5 = new Md5(mySelection.toString()); // why pass it stuff??
                output("Generating fingerprint for '" + mySelection.toString() + "'");
                output("'" + mySelection.toString() + "' = " + myMd5.hashThis(mySelection.toString()));
                outputTable.setValueAt(false, 0, 0);
                outputTable.setValueAt("", 0, 1);
                outputTable.setValueAt(false, 0, 2);
                outputTable.setValueAt(mySelection.toString(), 0, 3);
                outputTable.setValueAt(myMd5.hashThis(mySelection.toString()), 0, 4);
                playSound("/sounds/trumpet.wav");
                dialog("MD5 hash created");
            } catch (Exception e) {
                //toLogFile("ERROR - "+ e);
                //System.out.println(e);
            }
        }
    }//GEN-LAST:event_hashSingleFileMenuItemActionPerformed

    private void deleteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteMenuItemActionPerformed
        deleteDuplicates();
    }//GEN-LAST:event_deleteMenuItemActionPerformed

    private void browseMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseMenuItemActionPerformed
        folderTextField.setText(ml.browseForDir());
    }//GEN-LAST:event_browseMenuItemActionPerformed

    private void visitMarcusWebsiteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visitMarcusWebsiteMenuItemActionPerformed
        browserControl browser = new browserControl();
        browser.displayURL(marcusWynwoodsWebsite);
    }//GEN-LAST:event_visitMarcusWebsiteMenuItemActionPerformed

    private void visitWebsiteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_visitWebsiteMenuItemActionPerformed
        browserControl browser = new browserControl();
        browser.displayURL(dupliFinderWebsite);
    }//GEN-LAST:event_visitWebsiteMenuItemActionPerformed

    private void clearLogFileMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearLogFileMenuItemActionPerformed
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to clear the log file?", "Clear Log File?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)==0) {
            ml.deleteLogFile();
            logTextArea.setText("");
        }
    }//GEN-LAST:event_clearLogFileMenuItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        quit();
    }//GEN-LAST:event_formWindowClosing

    private void toDoMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toDoMenuItemActionPerformed
        JOptionPane.showMessageDialog(null, appName + "\n\n" +
        "Things to do for the next version:\n" +
        "   * Develop some type of user feedback while working\n" +
        "   * Make preview frame scroll sideways, or have images scale to fit\n" +
        "   * Get MP3 and WAV files to work in the preview frame\n" +
        "\n", "dupliFinder: things to do...", 1);
    }//GEN-LAST:event_toDoMenuItemActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        deleteDuplicates();
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        folderTextField.setText(ml.browseForDir());
    }//GEN-LAST:event_browseButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        String path = folderTextField.getText();
        
        output("Searching " + path);
        
        // Clear table
        clearTable();

        // Create a vector full of hashes and filenames
        Vector hashedVector = fd.calcMD5FromVector(fd.createFileListVector(folderTextField.getText()));

        // Search the vector for duplicate fingerprints
        // The fingerprint is the first 32 chars
        // Store all found duplicates in a new Set called "duplicateFileSet"        
        Set duplicateFileSet = new TreeSet();
        Set originalFileSet = new TreeSet();
        for (int i=0; i<=hashedVector.size(); i++) {
            for(int j=i+1; j<=hashedVector.size(); j++) {
                try {
                    if (hashedVector.get(i).toString().startsWith(hashedVector.get(j).toString().substring(0,32))) {
                        duplicateFileSet.add(hashedVector.get(j).toString());
                        originalFileSet.add(hashedVector.get(i).toString());
                        output("Match Found: " + hashedVector.get(j).toString() + " = " + hashedVector.get(i).toString());
                    }
                } catch (Exception e) {
                    //toLogFile("ERROR - "+ e);
                    //System.out.println(e);
                }
            }
        }

        // Turn the sets into String arrays so I can do stuff to them
        String[] duplicateFileArray = (String[])duplicateFileSet.toArray(new String[duplicateFileSet.size()]);
        String[] originalFileArray = (String[])originalFileSet.toArray(new String[originalFileSet.size()]);
        
        // Sort the arrays (by MD5 because each string starts with it)
        Arrays.sort(duplicateFileArray);
        Arrays.sort(originalFileArray);
        
        // Put it in the log file
        try {
            for (int i=0; i<=duplicateFileArray.length; i++) {
                output("Duplicate: " + duplicateFileArray[i]);
            }
        } catch (Exception e) {
            //toLogFile("ERROR - "+ e);
            //System.out.println(e);
        }
        
        
//String fileName = new String(outputTable.getValueAt(row, column).toString().substring(outputTable.getValueAt(row, column).toString().lastIndexOf(java.io.File.separatorChar)+1, outputTable.getValueAt(row, column).toString().length()));        
        
        // Put the results in the JTable
        for(int i=0; i<duplicateFileArray.length; i++) {
            // Tick Box
            outputTable.setValueAt(true, i, 0);
            // Duplicate File
            outputTable.setValueAt(duplicateFileArray[i].substring(32,duplicateFileArray[i].length()), i, 1);
            // Tick Box
            outputTable.setValueAt(false, i, 2);
            // Original File
            outputTable.setValueAt(originalFileArray[i].substring(32,originalFileArray[i].length()), i, 3);
            // Fingerprint
            if (duplicateFileArray[i].substring(0,32).equals(emptyFileHash)){
                outputTable.setValueAt("Empty File", i, 4);
            } else {
                outputTable.setValueAt(duplicateFileArray[i].substring(0,32), i, 4);
            }
            // Set colour
            
            // ColoredTableCellRenderer
            //ColoredTableCellRenderer ctcr = new ColoredTableCellRenderer();
            //TableColumn col1 = outputTable.getColumnModel().getColumn(1);
            //TableColumn col2 = outputTable.getColumnModel().getColumn(2);
            //TableColumn col3 = outputTable.getColumnModel().getColumn(3);
            //col1.setCellRenderer(ctcr);
            //col2.setCellRenderer(ctcr);
            //col3.setCellRenderer(ctcr);
            //outputTable.repaint();
            
            // Add a new row
            ((DefaultTableModel)outputTable.getModel()).addRow(new Object[outputTable.getModel().getColumnCount()]);
        }

        // Update the File Count Label
        fileCountLabel.setText("Files: " + hashedVector.size());

        // Finished
        if (duplicateFileSet.size()==0) {
            playSound("/sounds/trumpet.wav");
            dialog("There were no duplicate files found!");
        } else {
            playSound("/sounds/homer-doh.wav");
            dialog("I found " + duplicateFileSet.size() + " duplicate files");
        }

    }//GEN-LAST:event_searchButtonActionPerformed

    private void aboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutMenuItemActionPerformed
        aboutForm af = new aboutForm(this, true);
        af.setSize(700,420); // width, height
        af.setVisible(true);
    }//GEN-LAST:event_aboutMenuItemActionPerformed

    private void quitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitMenuItemActionPerformed
        quit();
    }//GEN-LAST:event_quitMenuItemActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new mainFrame().setVisible(true);
                // set up the preview frame with the logo
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem aboutMenuItem;
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel bottomRightPanel;
    private javax.swing.JButton browseButton;
    private javax.swing.JMenuItem browseMenuItem;
    private javax.swing.JMenuItem clearLogFileMenuItem;
    private javax.swing.JCheckBoxMenuItem createLogCheckBoxMenuItem;
    private javax.swing.JButton deleteButton;
    private javax.swing.JMenuItem deleteMenuItem;
    private javax.swing.JCheckBoxMenuItem dialogBoxCheckBoxMenuItem;
    private javax.swing.JLabel fileCountLabel;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JTextField folderTextField;
    private javax.swing.JMenuItem hashSingleFileMenuItem;
    private javax.swing.JMenu helpMenu;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JSeparator jSeparator8;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JCheckBoxMenuItem logCheckBoxMenuItem;
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JMenuBar myMenuBar;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JScrollPane outputScrollPane;
    private javax.swing.JSplitPane outputSplitPane;
    private javax.swing.JTable outputTable;
    private javax.swing.JCheckBoxMenuItem previewCheckBoxMenuItem;
    private javax.swing.JScrollPane previewScrollPane;
    private javax.swing.JSplitPane previewSplitPane;
    private javax.swing.JTextPane previewTextPane;
    private javax.swing.JMenuItem quitMenuItem;
    private javax.swing.JButton searchButton;
    private javax.swing.JCheckBoxMenuItem soundCheckBoxMenuItem;
    private javax.swing.JMenuItem toDoMenuItem;
    private javax.swing.JMenuItem visitMarcusWebsiteMenuItem;
    private javax.swing.JMenuItem visitWebsiteMenuItem;
    // End of variables declaration//GEN-END:variables
    
    
    /**
     * This is where all the hard work happens
     **/
    
    // quits the app
    public void quit() {
        try {
            if (JOptionPane.showConfirmDialog(null, "Are you sure you want to quit?", "Quit?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)==0) {
                output("Exited " + appName + "\n\n");
                //say("thanks for using dupli finder");
                System.exit(0);
            }
        } catch (Exception e) {
            //toLogFile("ERROR - "+ e);
            //System.out.println(e);
        }
    }
    
    // Clears the outputTable
    public void clearTable() {
        ((DefaultTableModel)outputTable.getModel()).setNumRows(1);
        outputTable.setValueAt(false, 0, 0);
        outputTable.setValueAt("", 0, 1);
        outputTable.setValueAt(false, 0, 2);
        outputTable.setValueAt("", 0, 3);
        outputTable.setValueAt("", 0, 4);
        // clear the preview too
        clearPreview();
    }
    
    public void clearPreview() {
        previewTextPane.setText(quickStart);
    }
    
    public void deleteDuplicates() {
        if (JOptionPane.showConfirmDialog(null, "Are you sure you want to delete the selected files?", "Delete", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE)==0) {
            int numberOfDeletedFiles = 0;
            for (int i=0; i<outputTable.getRowCount()-1; i++) {
                // If duplicate file is ticked
                if (outputTable.getValueAt(i, 0).toString()=="true"){
                    try {
                        if ((new File(outputTable.getValueAt(i, 1).toString())).exists()) {
                            (new File(outputTable.getValueAt(i, 1).toString())).delete();
                            output("Deleted: " + outputTable.getValueAt(i, 1).toString());
                            numberOfDeletedFiles = numberOfDeletedFiles + 1;
                        } else {
                            dialog("Error: Can't delete '" + outputTable.getValueAt(i, 1).toString() + "', file does not exist!");
                        }
                    } catch (Exception e) {
                        //toLogFile("ERROR - "+ e);
                        //System.out.println(e);
                    }
                }
                // If original file is ticked
                if (outputTable.getValueAt(i, 2).toString()=="true"){
                    try {
                        if ((new File(outputTable.getValueAt(i, 3).toString())).exists()) {
                            (new File(outputTable.getValueAt(i, 3).toString())).delete();
                            output("Deleted: " + outputTable.getValueAt(i, 3).toString());
                            numberOfDeletedFiles = numberOfDeletedFiles + 1;
                        } else {
                            dialog("Error: Can't delete '" + outputTable.getValueAt(i, 3).toString() + "', file does not exist!");
                        }
                    } catch (Exception e) {
                        //toLogFile("ERROR - "+ e);
                        //System.out.println(e);
                    }
                }
            }
            playSound("/sounds/boing.wav");
            dialog(numberOfDeletedFiles + " files deleted");
            clearTable();
        }
    }
    
    // Appends text to the text area, adds the date and sends it to the log file
    public void output(String text) {
        logTextArea.append(ml.toLogFile(ml.getDate() + ": " + text)+"\n");
    }

    // pop up a dialog box (if enabled) and send it to the output method above
    public void dialog(String text) {
        if (dialogBoxCheckBoxMenuItem.isSelected()) {
            ml.dialogBox(text, "dupliFinder");
        }
        output(text);
    }
    
    // wrapper for the playsound thing so I can turn it on and off via the menu
    public void playSound(String sound) {
        if (soundCheckBoxMenuItem.isSelected()) {
            ml.playSound(sound);
        }
    }
}
